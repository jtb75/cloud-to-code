name: Deploy to Production

on:
  pull_request:
    branches:
      - prod
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - prod

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_VERSION: "1.5.0"

jobs:
  plan:
    name: Plan Production Deployment
    runs-on: ubuntu-latest
    environment: prod
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PROD_AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.PROD_AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Terraform Backend
        run: |
          cat > backend.tf <<EOF
          terraform {
            backend "s3" {
              bucket         = "${{ secrets.PROD_TF_STATE_BUCKET }}"
              key            = "prod/terraform.tfstate"
              region         = "${{ secrets.PROD_AWS_REGION }}"
              dynamodb_table = "${{ secrets.PROD_TF_STATE_DYNAMODB_TABLE }}"
              encrypt        = true
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file="prod.tfvars" -out=tfplan -no-color | tee plan.txt
          
      - name: Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: prod-tfplan-pr-${{ github.event.pull_request.number }}
          path: |
            tfplan
            plan.txt

      - name: Comment PR with Plan
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('plan.txt', 'utf8');
            
            const output = `## 📋 Terraform Plan for Production
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${plan}
            \`\`\`
            
            </details>
            
            **Pull Request**: #${{ github.event.pull_request.number }}
            **Commit**: ${{ github.sha }}
            
            ⚠️ **This plan will be applied when the PR is merged to prod branch**`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: prod
    if: github.event_name == 'push' && github.ref == 'refs/heads/prod'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PROD_AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.PROD_AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Terraform Backend
        run: |
          cat > backend.tf <<EOF
          terraform {
            backend "s3" {
              bucket         = "${{ secrets.PROD_TF_STATE_BUCKET }}"
              key            = "prod/terraform.tfstate"
              region         = "${{ secrets.PROD_AWS_REGION }}"
              dynamodb_table = "${{ secrets.PROD_TF_STATE_DYNAMODB_TABLE }}"
              encrypt        = true
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file="prod.tfvars" -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: prod-tfplan
          path: |
            tfplan
            plan.txt

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Show Outputs
        run: terraform output -json > outputs.json

      - name: Upload Outputs
        uses: actions/upload-artifact@v3
        with:
          name: prod-outputs
          path: outputs.json

      - name: Create Deployment Summary
        run: |
          echo "## ✅ Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ secrets.PROD_AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat outputs.json >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Create Release Tag
        if: success()
        run: |
          TAG="prod-$(date +'%Y%m%d-%H%M%S')"
          git tag -a "$TAG" -m "Production deployment on $(date)"
          git push origin "$TAG"